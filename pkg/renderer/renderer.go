package renderer

import (
	"image/color"

	"github.com/b1018043/fc-emu/pkg/cpu"
	"github.com/b1018043/fc-emu/pkg/ppu"
	"github.com/hajimehoshi/ebiten/v2"
)

const (
	WINDOW_WIDTH  = 256
	WINDOW_HEIGHT = 240
)

var colors = []color.RGBA{
	{0x80, 0x80, 0x80, 0xFF}, {0x00, 0x3D, 0xA6, 0xFF}, {0x00, 0x12, 0xB0, 0xFF}, {0x44, 0x00, 0x96, 0xFF},
	{0xA1, 0x00, 0x5E, 0xFF}, {0xC7, 0x00, 0x28, 0xFF}, {0xBA, 0x06, 0x00, 0xFF}, {0x8C, 0x17, 0x00, 0xFF},
	{0x5C, 0x2F, 0x00, 0xFF}, {0x10, 0x45, 0x00, 0xFF}, {0x05, 0x4A, 0x00, 0xFF}, {0x00, 0x47, 0x2E, 0xFF},
	{0x00, 0x41, 0x66, 0xFF}, {0x00, 0x00, 0x00, 0xFF}, {0x05, 0x05, 0x05, 0xFF}, {0x05, 0x05, 0x05, 0xFF},
	{0xC7, 0xC7, 0xC7, 0xFF}, {0x00, 0x77, 0xFF, 0xFF}, {0x21, 0x55, 0xFF, 0xFF}, {0x82, 0x37, 0xFA, 0xFF},
	{0xEB, 0x2F, 0xB5, 0xFF}, {0xFF, 0x29, 0x50, 0xFF}, {0xFF, 0x22, 0x00, 0xFF}, {0xD6, 0x32, 0x00, 0xFF},
	{0xC4, 0x62, 0x00, 0xFF}, {0x35, 0x80, 0x00, 0xFF}, {0x05, 0x8F, 0x00, 0xFF}, {0x00, 0x8A, 0x55, 0xFF},
	{0x00, 0x99, 0xCC, 0xFF}, {0x21, 0x21, 0x21, 0xFF}, {0x09, 0x09, 0x09, 0xFF}, {0x09, 0x09, 0x09, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF}, {0x0F, 0xD7, 0xFF, 0xFF}, {0x69, 0xA2, 0xFF, 0xFF}, {0xD4, 0x80, 0xFF, 0xFF},
	{0xFF, 0x45, 0xF3, 0xFF}, {0xFF, 0x61, 0x8B, 0xFF}, {0xFF, 0x88, 0x33, 0xFF}, {0xFF, 0x9C, 0x12, 0xFF},
	{0xFA, 0xBC, 0x20, 0xFF}, {0x9F, 0xE3, 0x0E, 0xFF}, {0x2B, 0xF0, 0x35, 0xFF}, {0x0C, 0xF0, 0xA4, 0xFF},
	{0x05, 0xFB, 0xFF, 0xFF}, {0x5E, 0x5E, 0x5E, 0xFF}, {0x0D, 0x0D, 0x0D, 0xFF}, {0x0D, 0x0D, 0x0D, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF}, {0xA6, 0xFC, 0xFF, 0xFF}, {0xB3, 0xEC, 0xFF, 0xFF}, {0xDA, 0xAB, 0xEB, 0xFF},
	{0xFF, 0xA8, 0xF9, 0xFF}, {0xFF, 0xAB, 0xB3, 0xFF}, {0xFF, 0xD2, 0xB0, 0xFF}, {0xFF, 0xEF, 0xA6, 0xFF},
	{0xFF, 0xF7, 0x9C, 0xFF}, {0xD7, 0xE8, 0x95, 0xFF}, {0xA6, 0xED, 0xAF, 0xFF}, {0xA2, 0xF2, 0xDA, 0xFF},
	{0x99, 0xFF, 0xFC, 0xFF}, {0xDD, 0xDD, 0xDD, 0xFF}, {0x11, 0x11, 0x11, 0xFF}, {0x11, 0x11, 0x11, 0xFF},
}

type EbitenRenderer struct {
	pixels []byte
	CPU    *cpu.CPU
	PPU    *ppu.PPU
}

func NewEbitenRenderer(cpu *cpu.CPU, ppu *ppu.PPU) *EbitenRenderer {
	return &EbitenRenderer{
		pixels: make([]byte, 4*WINDOW_WIDTH*WINDOW_HEIGHT),
		CPU:    cpu,
		PPU:    ppu,
	}
}

// func (e *EbitenRenderer) renderSprite(screen *ebiten.Image, sprite [][]byte, spriteNum int) {
// 	for i := 0; i < 8; i++ {
// 		for j := 0; j < 8; j++ {
// 		}
// 	}
// }

func (e *EbitenRenderer) renderTile(tile ppu.BackgroundContent, tileX, tileY int) {
	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			paletteIndex := tile.PaletteID*4 + int(tile.Tile[i][j])
			colorID := e.PPU.PaletteRAM[paletteIndex]
			color := colors[colorID]
			x, y := tileX+j, tileY+i
			if x >= 0 && x <= 0xFF && y >= 0 && y < 224 {
				index := (x + (y * 0x100)) * 4
				e.pixels[index] = color.R
				e.pixels[index+1] = color.G
				e.pixels[index+2] = color.B
				e.pixels[index+3] = color.A
			}
		}
	}
}

func (e *EbitenRenderer) renderBG() {
	background := e.PPU.Background
	for i, v := range background {
		// x, y := (i%33)*8, (i/33)*8
		x, y := (i%32)*8, (i/32)*8
		// if v.Tile[0][0] != 0 {
		// 	log.Fatalf("x,y:=%d,%d\ni:=%x\nbackground:=%d\n", x, y, i, len(background))
		// }
		e.renderTile(v, x, y)
	}
}

func (e *EbitenRenderer) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
	return WINDOW_WIDTH, WINDOW_HEIGHT
}

func (e *EbitenRenderer) Update() error {
	for {
		cycle := 0
		cycle += e.CPU.Run()
		if ok := e.PPU.Run(cycle * 3); ok {
			break
		}
	}
	e.renderBG()
	return nil
}

func (e *EbitenRenderer) Draw(screen *ebiten.Image) {
	if e.pixels == nil {
		e.pixels = make([]byte, WINDOW_WIDTH*WINDOW_HEIGHT*4)
	}
	screen.ReplacePixels(e.pixels)
}

var _ ebiten.Game = &EbitenRenderer{}
